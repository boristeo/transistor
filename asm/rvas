#!/usr/bin/env python3

import os
import sys
import struct

#/*(RISC-V V2.2)*/
#/******* MASKS ********/
BYTE_MASK = 0xff
BYTE_LEN = 8
BYTE_LEN_B = 1
HWORD_MASK = 0xffff
HWORD_LEN = 16
HWORD_LEN_B = 2
WORD_MASK = 0xffffffff
WORD_MAXS = 0x7fffffff
WORD_MINS = 0x80000000
WORD_LEN = 32
WORD_LEN_B = 4
DWORD_MASK = 0xffffffffffffffff
DWORD_LEN = 64
DWORD_LEN_B = 8

OPCODE_MASK = 0x7f
OPCODE_OFFSET = 0
OPCODE_LENGTH = 7

RD_MASK = 0xf80
RD_OFFSET = 7
RD_LENGTH = 5

FUNCT3_MASK = 0x7000
FUNCT3_OFFSET = 12
FUNCT3_LENGTH = 3

RS1_MASK = 0xf8000
RS1_OFFSET = 15
RS1_LENGTH = 5

RS2_MASK = 0x1f00000
RS2_OFFSET = 20
RS2_LENGTH = 5

SHAMT_MASK = 0x3f00000
SHAMT_OFFSET = 20
SHAMT_LENGTH = 6

SHEAD_MASK = 0xfc000000
SHEAD_OFFSET = 26
SHEAD_LENGTH = 6

SHAMTW_MASK = 0x1f00000
SHAMTW_OFFSET = 20
SHAMTW_LENGTH = 5

SHEADW_MASK = 0xfe000000
SHEADW_OFFSET = 25
SHEADW_LENGTH = 7

#/* R */
R_FUNCT7_MASK = 0xfe000000
R_FUNCT7_OFFSET = 25
R_FUNCT7_LENGTH = 7

#/* I */
I_IMMB0_MASK = 0xfff00000
I_IMMB0_OFFSET = 20
I_IMMB0_LENGTH = 12


#/* S */
S_IMM40_MASK = 0xf80
S_IMM40_OFFSET = 7
S_IMM40_LENGTH = 5

S_IMMB5_MASK = 0xfe000000
S_IMMB5_OFFSET = 25
S_IMMB5_LENGTH = 7

#/* B */
B_IMMBB_MASK = 0x80
B_IMMBB_OFFSET = 7
B_IMMBB_LENGTH = 1

B_IMM41_MASK = 0xf00
B_IMM41_OFFSET = 8
B_IMM41_LENGTH = 4

B_IMMA5_MASK = 0x7e000000
B_IMMA5_OFFSET = 25
B_IMMA5_LENGTH = 6

B_IMMCC_MASK = 0x80000000
B_IMMCC_OFFSET = 31
B_IMMCC_LENGTH = 1

#/* U */
U_IMMVC_MASK = 0xfffff000
#/* DO NOT USE - IMMVC ALREADY ALIGNED
#U_IMMVC_OFFSET = 12
#U_IMMVC_LENGTH = 20
#*/

#/* J */
J_IMMJC_MASK = 0xff000
J_IMMJC_OFFSET = 12
J_IMMJC_LENGTH = 8

J_IMMBB_MASK = 0x100000
J_IMMBB_OFFSET = 20
J_IMMBB_LENGTH = 1

J_IMMA1_MASK = 0x7fe00000
J_IMMA1_OFFSET = 21
F_IMMA1_LENGTH = 10

J_IMMKK_MASK = 0x80000000
J_IMMKK_OFFSET = 31
J_IMMKK_LENGTH = 1


#    31 30 29 28|27 26 25 24|23 22 21 20|19 18 17 16|15 14 13 12|11 10 09 08|07 06 05 04|03 02 01 00
#    -----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------
# R  f7 f7 f7 f7|f7 f7 f7 s2|s2 s2 s2 s2|s1 s1 s1 s1|s1 f3 f3 f3|rd rd rd rd|rd op op op|op op op op
# I  B0 B0 B0 B0|B0 B0 B0 B0|B0 B0 B0 B0|s1 s1 s1 s1|s1 f3 f3 f3|rd rd rd rd|rd op op op|op op op op
# S  B5 B5 B5 B5|B5 B5 B5 s2|s2 s2 s2 s2|s1 s1 s1 s1|s1 f3 f3 f3|40 40 40 40|40 op op op|op op op op
# B  CC A5 A5 A5|A5 A5 A5 s2|s2 s2 s2 s2|s1 s1 s1 s1|s1 f3 f3 f3|41 41 41 41|BB op op op|op op op op
# U  VC VC VC VC|VC VC VC VC|VC VC VC VC|VC VC VC VC|VC VC VC VC|rd rd rd rd|rd op op op|op op op op
# J  KK A1 A1 A1|A1 A1 A1 A1|A1 A1 A1 BB|JC JC JC JC|JC JC JC JC|rd rd rd rd|rd op op op|op op op op


ENCODING = {
  0x33: 'R', # OP
  0x3b: 'R', # OP32
  0x03: 'I', # LOAD
  0x13: 'I', # OPIMM
  0x1b: 'I', # OPIMM32
  0x67: 'I', # JALR
  0x23: 'S', # STORE
  0x63: 'B', # BRANCH
  0x17: 'U', # AUIPC
  0x37: 'U', # LUI
  0x6f: 'J', # JAL
  0x73: 'E'
}

FUNCT3 = {
'slli'   : 0b001,
'srli'   : 0b101,
'srai'   : 0b101,
'addi'   : 0b000,
'slti'   : 0b010,
'sltiu'  : 0b011,
'xori'   : 0b100,
'ori'    : 0b110,
'andi'   : 0b111,
#'auipc'  : 0b111,
'slliw'  : 0b001,
'srliw'  : 0b101,
'sraiw'  : 0b101,
'addiw'  : 0b000,
'sb'     : 0b000,
'sh'     : 0b001,
'sw'     : 0b010,
'sd'     : 0b011,
'lb'     : 0b000,
'lh'     : 0b001,
'lw'     : 0b010,
'ld'     : 0b011,
'lbu'    : 0b100,
'lhu'    : 0b101,
'lwu'    : 0b110,
'add'    : 0b000,
'sll'    : 0b001,
'slt'    : 0b010,
'sltu'   : 0b011,
'xor'    : 0b100,
'srl'    : 0b101,
'or'     : 0b110,
'and'    : 0b111,
'mul'    : 0b000,
'mulh'   : 0b001,
'mulhsu' : 0b010,
'mulhu'  : 0b011,
'div'    : 0b100,
'divu'   : 0b101,
'rem'    : 0b110,
'remu'   : 0b111,
'sub'    : 0b000,
'sra'    : 0b101,
#'lui'    : 0b000,
'addw'   : 0b000,
'sllw'   : 0b001,
'srlw'   : 0b101,
'mulw'   : 0b000,
'divw'   : 0b100,
'divuw'  : 0b101,
'remw'   : 0b110,
'remuw'  : 0b111,
'subw'   : 0b000,
'sraw'   : 0b101,
'beq'    : 0b000,
'bne'    : 0b001,
'blt'    : 0b100,
'bge'    : 0b101,
'bltu'   : 0b110,
'bgeu'   : 0b111,
'jalr'   : 0b000,
#'jal'    : 0b100,
'ecall'  : 0b000,
'ebreak' : 0b000,
'csrrw'  : 0b001,
'csrrs'  : 0b010,
'csrrc'  : 0b011,
'csrrwi' : 0b101,
'csrrsi' : 0b110,
'csrrci' : 0b111,
'fence'  : 0b000,
'fence.i': 0b001
}

OPCODE = {
'slli'   : 0b0010011,
'srli'   : 0b0010011,
'srai'   : 0b0010011,
'addi'   : 0b0010011,
'slti'   : 0b0010011,
'sltiu'  : 0b0010011,
'xori'   : 0b0010011,
'ori'    : 0b0010011,
'andi'   : 0b0010011,
'auipc'  : 0b0010111,
'slliw'  : 0b0011011,
'srliw'  : 0b0011011,
'sraiw'  : 0b0011011,
'addiw'  : 0b0011011,
'sb'     : 0b0100011,
'sh'     : 0b0100011,
'sw'     : 0b0100011,
'sd'     : 0b0100011,
'lb'     : 0b0000011,
'lh'     : 0b0000011,
'lw'     : 0b0000011,
'ld'     : 0b0000011,
'lbu'    : 0b0000011,
'lhu'    : 0b0000011,
'lwu'    : 0b0000011,
'add'    : 0b0110011,
'sll'    : 0b0110011,
'slt'    : 0b0110011,
'sltu'   : 0b0110011,
'xor'    : 0b0110011,
'srl'    : 0b0110011,
'or'     : 0b0110011,
'and'    : 0b0110011,
'mul'    : 0b0110011,
'mulh'   : 0b0110011,
'mulhsu' : 0b0110011,
'mulhu'  : 0b0110011,
'div'    : 0b0110011,
'divu'   : 0b0110011,
'rem'    : 0b0110011,
'remu'   : 0b0110011,
'sub'    : 0b0110011,
'sra'    : 0b0110011,
'lui'    : 0b0110111,
'addw'   : 0b0111011,
'sllw'   : 0b0111011,
'srlw'   : 0b0111011,
'mulw'   : 0b0111011,
'divw'   : 0b0111011,
'divuw'  : 0b0111011,
'remw'   : 0b0111011,
'remuw'  : 0b0111011,
'subw'   : 0b0111011,
'sraw'   : 0b0111011,
'beq'    : 0b1100011,
'bne'    : 0b1100011,
'blt'    : 0b1100011,
'bge'    : 0b1100011,
'bltu'   : 0b1100011,
'bgeu'   : 0b1100011,
'jalr'   : 0b1100111,
'jal'    : 0b1101111,
'ecall'  : 0b1110011,
'ebreak' : 0b1110011,
'csrrw'  : 0b1110011,
'csrrs'  : 0b1110011,
'csrrc'  : 0b1110011,
'csrrwi' : 0b1110011,
'csrrsi' : 0b1110011,
'csrrci' : 0b1110011,
'fence'  : 0b0001111,
'fence.i': 0b0001111
}

REG_IDX = {
'x0' : 0,
'x1' : 1,
'x2' : 2,
'x3' : 3,
'x4' : 4,
'x5' : 5,
'x6' : 6,
'x7' : 7,
'x8' : 8,
'x9' : 9,
'x10' : 10,
'x11' : 11,
'x12' : 12,
'x13' : 13,
'x14' : 14,
'x15' : 15,
'x16' : 16,
'x17' : 17,
'x18' : 18,
'x19' : 19,
'x20' : 20,
'x21' : 21,
'x22' : 22,
'x23' : 23,
'x24' : 24,
'x25' : 25,
'x26' : 26,
'x27' : 27,
'x28' : 28,
'x29' : 29,
'x30' : 30,
'x31' : 31,
'zero' : 0,
'ra' : 1,
'sp' : 2,
'gp' : 3,
'tp' : 4,
't0' : 5,
't1' : 6,
't2' : 7,
's0' : 8,
'fp' : 8,
's1' : 9,
'a0' : 10,
'a1' : 11,
'a2' : 12,
'a3' : 13,
'a4' : 14,
'a5' : 15,
'a6' : 16,
'a7' : 17,
's2' : 18,
's3' : 19,
's4' : 20,
's5' : 21,
's6' : 22,
's7' : 23,
's8' : 24,
's9' : 25,
's10' : 26,
's11' : 27,
't3' : 28,
't4' : 29,
't5' : 30,
't6' : 31
}


def encode_rv(name, *args):
  op = OPCODE[name]
  encoding = ENCODING[op]

  enc_int = op
  if encoding == 'R':
    assert len(args) == 3
    funct3 = FUNCT3[name]
    enc_int |= funct3 << FUNCT3_OFFSET
    enc_int |= REG_IDX[args[0]] << RD_OFFSET
    enc_int |= REG_IDX[args[1]] << RS1_OFFSET
    enc_int |= REG_IDX[args[2]] << RS2_OFFSET
  elif encoding == 'I':
    assert len(args) == 3
    immediate = int(args[2])
    assert immediate < 2 ** I_IMMB0_LENGTH
    assert immediate >= -(2 ** (I_IMMB0_LENGTH - 1))

    funct3 = FUNCT3[name]
    enc_int |= funct3 << FUNCT3_OFFSET
    enc_int |= REG_IDX[args[0]] << RD_OFFSET
    enc_int |= REG_IDX[args[1]] << RS1_OFFSET
    enc_int |= immediate << I_IMMB0_OFFSET
  elif encoding == 'S':
    assert len(args) == 3
    immediate = int(args[2])
    assert immediate < 2 ** (S_IMM40_LENGTH + S_IMMB5_LENGTH)
    assert immediate >= -(2 ** (S_IMM40_LENGTH + S_IMMB5_LENGTH - 1))

    funct3 = FUNCT3[name]
    enc_int |= funct3 << FUNCT3_OFFSET
    enc_int |= REG_IDX[args[0]] << RS1_OFFSET
    enc_int |= REG_IDX[args[1]] << RS2_OFFSET
    enc_int |= (immediate & 0b11111) << S_IMM40_OFFSET
    enc_int |= (immediate >> 5) << S_IMMB5_OFFSET
  elif encoding == 'B':
    raise NotImplementedError
  elif encoding == 'U':
    raise NotImplementedError
  elif encoding == 'J':
    raise NotImplementedError
  elif encoding == 'E':
    if name == 'ebreak':
      immediate = 1
    elif name == 'ecall':
      immediate = 0
    else:
      assert False, name + ' not handled'
    enc_int |= immediate << I_IMMB0_OFFSET
  else:
    assert False,encoding + ' encoding not handled'


  return enc_int.to_bytes(4, byteorder='little')

if len(sys.argv) < 2:
  print('No input file specified')
  exit()

labels = {}
byte = 0
with open(sys.argv[1], 'r') as src:
  with os.fdopen(sys.stdout.fileno(), 'wb', closefd=False) as stdout:
    for i, line in enumerate([l.strip().lower() for l in src]):
      if len(line) == 0:
        # empty
        continue

      elif line[-1] == ':':
        # label
        if len(line) < 1 or line[:-1] in labels:
          print('Repeated label at line %d' % i)
          exit()
        else:
          labels[line[:-1]] = byte
          continue

      else:
        # instruction
        parts = line.split(',')
        first = parts[0].split()
        parts.pop(0)
        assert len(first) == 1 or len(first) == 2
        if len(first) == 2:
            parts.insert(0, first[1])
        name = first[0]
        args = parts[1:]
        if len(parts) > 1:
          if parts[-1][-1] == ')':
            indexing = args.pop(-1).split('(')
            assert len(indexing) == 2
            args.insert(0, indexing[1][:-1])
            args.append(indexing[0])

        encoded = encode_rv(name, *args)
        stdout.write(encoded)
        byte += len(encoded)

    stdout.flush()
